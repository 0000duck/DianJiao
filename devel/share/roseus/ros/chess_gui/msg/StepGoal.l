;; Auto-generated. Do not edit!


(when (boundp 'chess_gui::StepGoal)
  (if (not (find-package "CHESS_GUI"))
    (make-package "CHESS_GUI"))
  (shadow 'StepGoal (find-package "CHESS_GUI")))
(unless (find-package "CHESS_GUI::STEPGOAL")
  (make-package "CHESS_GUI::STEPGOAL"))

(in-package "ROS")
;;//! \htmlinclude StepGoal.msg.html


(defclass chess_gui::StepGoal
  :super ros::object
  :slots (_max_x _max_y _ops ))

(defmethod chess_gui::StepGoal
  (:init
   (&key
    ((:max_x __max_x) 0.0)
    ((:max_y __max_y) 0.0)
    ((:ops __ops) (let (r) (dotimes (i 0) (push (instance chess_gui::Operation :init) r)) r))
    )
   (send-super :init)
   (setq _max_x (float __max_x))
   (setq _max_y (float __max_y))
   (setq _ops __ops)
   self)
  (:max_x
   (&optional __max_x)
   (if __max_x (setq _max_x __max_x)) _max_x)
  (:max_y
   (&optional __max_y)
   (if __max_y (setq _max_y __max_y)) _max_y)
  (:ops
   (&rest __ops)
   (if (keywordp (car __ops))
       (send* _ops __ops)
     (progn
       (if __ops (setq _ops (car __ops)))
       _ops)))
  (:serialization-length
   ()
   (+
    ;; float32 _max_x
    4
    ;; float32 _max_y
    4
    ;; chess_gui/Operation[] _ops
    (apply #'+ (send-all _ops :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32 _max_x
       (sys::poke _max_x (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; float32 _max_y
       (sys::poke _max_y (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;; chess_gui/Operation[] _ops
     (write-long (length _ops) s)
     (dolist (elem _ops)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32 _max_x
     (setq _max_x (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; float32 _max_y
     (setq _max_y (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;; chess_gui/Operation[] _ops
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _ops (let (r) (dotimes (i n) (push (instance chess_gui::Operation :init) r)) r))
     (dolist (elem- _ops)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get chess_gui::StepGoal :md5sum-) "8659c0f3910f1e3a2a4f3f1f180fafca")
(setf (get chess_gui::StepGoal :datatype-) "chess_gui/StepGoal")
(setf (get chess_gui::StepGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal definition
float32 max_x
float32 max_y
Operation[] ops

================================================================================
MSG: chess_gui/Operation
# operation type go = 0 ; capture = 1
uint32 OPERATION_GO = 0      
uint32 OPREATION_CAPTURE = 1

uint32 type

float32 pick_x
float32 pick_y

float32 place_x
float32 place_y


")



(provide :chess_gui/StepGoal "8659c0f3910f1e3a2a4f3f1f180fafca")


