;; Auto-generated. Do not edit!


(when (boundp 'chess_msgs::StepGoal)
  (if (not (find-package "CHESS_MSGS"))
    (make-package "CHESS_MSGS"))
  (shadow 'StepGoal (find-package "CHESS_MSGS")))
(unless (find-package "CHESS_MSGS::STEPGOAL")
  (make-package "CHESS_MSGS::STEPGOAL"))

(in-package "ROS")
;;//! \htmlinclude StepGoal.msg.html


(defclass chess_msgs::StepGoal
  :super ros::object
  :slots (_ops ))

(defmethod chess_msgs::StepGoal
  (:init
   (&key
    ((:ops __ops) (let (r) (dotimes (i 0) (push (instance chess_msgs::Operation :init) r)) r))
    )
   (send-super :init)
   (setq _ops __ops)
   self)
  (:ops
   (&rest __ops)
   (if (keywordp (car __ops))
       (send* _ops __ops)
     (progn
       (if __ops (setq _ops (car __ops)))
       _ops)))
  (:serialization-length
   ()
   (+
    ;; chess_msgs/Operation[] _ops
    (apply #'+ (send-all _ops :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; chess_msgs/Operation[] _ops
     (write-long (length _ops) s)
     (dolist (elem _ops)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; chess_msgs/Operation[] _ops
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _ops (let (r) (dotimes (i n) (push (instance chess_msgs::Operation :init) r)) r))
     (dolist (elem- _ops)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get chess_msgs::StepGoal :md5sum-) "3be9cbb635e0b30a073919d65ae3caf2")
(setf (get chess_msgs::StepGoal :datatype-) "chess_msgs/StepGoal")
(setf (get chess_msgs::StepGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal definition
Operation[] ops

================================================================================
MSG: chess_msgs/Operation
# operation type go = 0 ; capture = 1 ; wait = 2
uint32 OPERATION_GO = 0      
uint32 OPERATION_CAPTURE = 1
uint32 OPERATION_WAIT = 2

# position type far = 0; near = 1
uint32 POSITION_FAR = 0
uint32 POSITION_NEAR = 1

uint32 type

uint32  pick_type
float32 pick_x
float32 pick_y

uint32  place_type
float32 place_x
float32 place_y


")



(provide :chess_msgs/StepGoal "3be9cbb635e0b30a073919d65ae3caf2")


