# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chess_msgs/PlayRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import chess_msgs.msg

class PlayRequest(genpy.Message):
  _md5sum = "a0e5c4809f45bf914ed4eff2bc1a842b"
  _type = "chess_msgs/PlayRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 max_x
float32 max_y
Operation[] ops

================================================================================
MSG: chess_msgs/Operation
# operation type go = 0 ; capture = 1 ; wait = 2
uint32 OPERATION_GO = 0      
uint32 OPERATION_CAPTURE = 1
uint32 OPERATION_WAIT = 2

# position type far = 0; near = 1
uint32 POSITION_FAR = 0
uint32 POSITION_NEAR = 1

uint32 type

uint32  pick_type
float32 pick_x
float32 pick_y

uint32  place_type
float32 place_x
float32 place_y

"""
  __slots__ = ['max_x','max_y','ops']
  _slot_types = ['float32','float32','chess_msgs/Operation[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       max_x,max_y,ops

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlayRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.max_x is None:
        self.max_x = 0.
      if self.max_y is None:
        self.max_y = 0.
      if self.ops is None:
        self.ops = []
    else:
      self.max_x = 0.
      self.max_y = 0.
      self.ops = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.max_x, _x.max_y))
      length = len(self.ops)
      buff.write(_struct_I.pack(length))
      for val1 in self.ops:
        _x = val1
        buff.write(_get_struct_2I2fI2f().pack(_x.type, _x.pick_type, _x.pick_x, _x.pick_y, _x.place_type, _x.place_x, _x.place_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.ops is None:
        self.ops = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.max_x, _x.max_y,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ops = []
      for i in range(0, length):
        val1 = chess_msgs.msg.Operation()
        _x = val1
        start = end
        end += 28
        (_x.type, _x.pick_type, _x.pick_x, _x.pick_y, _x.place_type, _x.place_x, _x.place_y,) = _get_struct_2I2fI2f().unpack(str[start:end])
        self.ops.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f().pack(_x.max_x, _x.max_y))
      length = len(self.ops)
      buff.write(_struct_I.pack(length))
      for val1 in self.ops:
        _x = val1
        buff.write(_get_struct_2I2fI2f().pack(_x.type, _x.pick_type, _x.pick_x, _x.pick_y, _x.place_type, _x.place_x, _x.place_y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.ops is None:
        self.ops = None
      end = 0
      _x = self
      start = end
      end += 8
      (_x.max_x, _x.max_y,) = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ops = []
      for i in range(0, length):
        val1 = chess_msgs.msg.Operation()
        _x = val1
        start = end
        end += 28
        (_x.type, _x.pick_type, _x.pick_x, _x.pick_y, _x.place_type, _x.place_x, _x.place_y,) = _get_struct_2I2fI2f().unpack(str[start:end])
        self.ops.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_2I2fI2f = None
def _get_struct_2I2fI2f():
    global _struct_2I2fI2f
    if _struct_2I2fI2f is None:
        _struct_2I2fI2f = struct.Struct("<2I2fI2f")
    return _struct_2I2fI2f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from chess_msgs/PlayResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlayResponse(genpy.Message):
  _md5sum = "21744300052380276c040efd28f6660f"
  _type = "chess_msgs/PlayResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
bool res
string msg
"""
  __slots__ = ['res','msg']
  _slot_types = ['bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       res,msg

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlayResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.res is None:
        self.res = False
      if self.msg is None:
        self.msg = ''
    else:
      self.res = False
      self.msg = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.res))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.res,) = _get_struct_B().unpack(str[start:end])
      self.res = bool(self.res)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.res))
      _x = self.msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.res,) = _get_struct_B().unpack(str[start:end])
      self.res = bool(self.res)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.msg = str[start:end].decode('utf-8')
      else:
        self.msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class Play(object):
  _type          = 'chess_msgs/Play'
  _md5sum = '9ca8bd096976365b8f806f82ceddea70'
  _request_class  = PlayRequest
  _response_class = PlayResponse
